C51 COMPILER V9.60.7.0   DS1302                                                            05/20/2025 20:08:39 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE DS1302
OBJECT MODULE PLACED IN .\Objects\ds1302.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE code\ds1302.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listin
                    -gs\ds1302.lst) TABS(2) OBJECT(.\Objects\ds1302.obj)

line level    source

   1          #include "ds1302.h"
   2          
   3          sbit SDA = P2^3;
   4          sbit SCK = P1^7;
   5          sbit RST = P2^7;
   6          
   7          // 秒 分 时 天 月 星期 年
   8          uchar code write_address[7] = {0x80, 0x82, 0x84, 0x86, 0x88, 0x8A, 0x8C};
   9          uchar code read_address[7] = {0x81, 0x83, 0x85, 0x87, 0x89, 0x8B, 0x8D};
  10          
  11          
  12          
  13          //
  14          void Write_Ds1302(unsigned  char temp) 
  15          {
  16   1        unsigned char i;
  17   1        for (i=0;i<8;i++)       
  18   1        { 
  19   2          SCK = 0;
  20   2          SDA = temp&0x01;
  21   2          temp>>=1; 
  22   2          SCK=1;
  23   2        }
  24   1      }   
  25          
  26          //
  27          void Write_Ds1302_Byte( unsigned char address,unsigned char dat )     
  28          {
  29   1        RST=0;  _nop_();
  30   1        SCK=0;  _nop_();
  31   1        RST=1;  _nop_();  
  32   1        Write_Ds1302(address);  
  33   1        Write_Ds1302(dat);    
  34   1        RST=0; 
  35   1      }
  36          
  37          //
  38          unsigned char Read_Ds1302_Byte ( unsigned char address )
  39          {
  40   1        unsigned char i,temp=0x00;
  41   1        RST=0;  _nop_();
  42   1        SCK=0;  _nop_();
  43   1        RST=1;  _nop_();
  44   1        Write_Ds1302(address);
  45   1        for (i=0;i<8;i++)   
  46   1        {   
  47   2          SCK=0;
  48   2          temp>>=1; 
  49   2          if(SDA)
  50   2          temp|=0x80; 
  51   2          SCK=1;
  52   2        } 
  53   1        RST=0;  _nop_();
  54   1        SCK=0;  _nop_();
C51 COMPILER V9.60.7.0   DS1302                                                            05/20/2025 20:08:39 PAGE 2   

  55   1        SCK=1;  _nop_();
  56   1        SDA=0;  _nop_();
  57   1        SDA=1;  _nop_();
  58   1        return (temp);      
  59   1      }
  60          
  61          /* 
  62          uchar hex_to_bcd(uchar HEX)
  63          {
  64            uchar BCD;
  65            BCD = (HEX / 10) << 4 | (HEX % 10);
  66            return BCD;
  67          }
  68          
  69          uchar bcd_to_hex(uchar BCD)
  70          {
  71            uchar HEX;
  72            HEX = (BCD << 4)* 10 | (BCD & 0x0F);
  73            return BCD;
  74          } 
  75          */
  76          
  77          uchar hex_to_bcd(uchar hex)
  78          {
  79   1        return (hex / 10 * 16) + (hex % 10);
  80   1      }
  81          
  82          uchar bcd_to_hex(uchar bcd)
  83          {
  84   1        return (bcd / 16 * 10) + (bcd % 16);
  85   1      }
  86          
  87          
  88          
  89          void write_datetime(uchar *time_init)
  90          {
  91   1        // time -> bcd
  92   1        uchar i;
  93   1        Write_Ds1302_Byte(0x8E, 0x00);
  94   1        
  95   1        for (i = 0;i < 7;i++)
  96   1        {
  97   2          Write_Ds1302_Byte(write_address[i], time_init[i]);
  98   2        }
  99   1        
 100   1        Write_Ds1302_Byte(0x8E, 0x80);
 101   1      }
 102          
 103          void read_datetime(uchar *now_time)
 104          {
 105   1        uchar i;
 106   1        for (i = 0;i < 3;i++)
 107   1        {
 108   2          now_time[i] = Read_Ds1302_Byte(read_address[i]);
 109   2        }
 110   1      
 111   1        for (i = 0;i < 3;i++)
 112   1        {
 113   2          now_time[i] = bcd_to_hex(now_time[i]);
 114   2        }
 115   1      }

C51 COMPILER V9.60.7.0   DS1302                                                            05/20/2025 20:08:39 PAGE 3   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    251    ----
   CONSTANT SIZE    =     14    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
