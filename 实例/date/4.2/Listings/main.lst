C51 COMPILER V9.60.7.0   MAIN                                                              04/07/2025 16:34:10 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Program Files\keil5\C51\BIN\C51.EXE code\main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRIN
                    -T(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "main.h"
   2          
   3          extern uchar led[8];
   4          extern uchar seg[8];
   5          
   6          enum {
   7              KEY_TASK = 10,
   8              FLICKER_TASK = 100,
   9              STATE_TASK = 20,
  10              TEMP_TASK = 1000
  11          };
  12          
  13          // key
  14          struct {
  15              uchar time;
  16              uchar press;
  17          } key;
  18          
  19          // 闪烁
  20          struct {
  21              uchar time;
  22              uchar state;
  23          } flicker;
  24          
  25          // 测温
  26          struct {
  27              int value;
  28              uint time;
  29          } temp;
  30          
  31          // 数码管显示状态
  32          struct {
  33              uchar mode1;
  34              uchar mode2;    // 触发  | 0 -> 上触发 | 1 -> 下触发
  35              uchar time;
  36              uchar only;
  37          } state;
  38          
  39          // 校准界面
  40          struct {
  41              char value;
  42              char list[3];
  43              char negative;
  44          } adjust;
  45          
  46          // 参数界面
  47          struct {
  48              char value;
  49              char list[3];
  50              char negative;
  51          } argument;
  52          
  53          void main()
  54          {
C51 COMPILER V9.60.7.0   MAIN                                                              04/07/2025 16:34:10 PAGE 2   

  55   1          boot_init();
  56   1          state.only = 255;
  57   1          temp.value = 0;
  58   1      
  59   1          argument.value = 26;
  60   1      
  61   1          read_temp();
  62   1      
  63   1          led_proc(0);
  64   1          led_proc(1);
  65   1          led_proc(2);
  66   1      
  67   1          while (1)
  68   1          {
  69   2              if (key.time == KEY_TASK) 
  70   2              {
  71   3                  key.time = 0;
  72   3                  key_proc();
  73   3              }
  74   2      
  75   2              if (flicker.time == FLICKER_TASK)
  76   2              {
  77   3                  flicker.time = 0;
  78   3                  flicker.state = !flicker.state;
  79   3              }
  80   2      
  81   2              if (state.time == STATE_TASK)
  82   2              {
  83   3                  state.time = 0;
  84   3                  state_proc();
  85   3              }
  86   2      
  87   2              if (temp.time == TEMP_TASK)
  88   2              {
  89   3                  temp.time = 0;
  90   3                  ds18b20_proc();
  91   3              }
  92   2          }
  93   1      }
  94          
  95          
  96          void Timer0_Isr(void) interrupt 1
  97          {
  98   1          seg_display();
  99   1          led_display();
 100   1      
 101   1          if ( key.time < KEY_TASK ) { key.time++; }
 102   1      
 103   1          if ( flicker.time < FLICKER_TASK ) { flicker.time++; }
 104   1      
 105   1          if ( state.time < STATE_TASK ) { state.time++; }
 106   1      
 107   1          if ( temp.time < TEMP_TASK ) { temp.time++; }
 108   1          
 109   1      }
 110          
 111          
 112          void key_proc()
 113          {
 114   1          key.press = key_scan();
 115   1      
 116   1          switch (key.press)
C51 COMPILER V9.60.7.0   MAIN                                                              04/07/2025 16:34:10 PAGE 3   

 117   1          {
 118   2              case 4:
 119   2              {
 120   3                  state.mode1 = (state.mode1 + 1) % 3;
 121   3                  led_proc(0);
 122   3              }
 123   2              break;
 124   2      
 125   2              case 5:
 126   2              {
 127   3                  state.mode2 = (state.mode2 + 1) % 2;
 128   3                  led_proc(1);
 129   3                  led_proc(2);
 130   3              }
 131   2              break;
 132   2      
 133   2              // 减按键
 134   2              case 8:
 135   2              {
 136   3                  if (state.mode1 == 1 && adjust.value != -99)
 137   3                  {
 138   4                      adjust.value--;
 139   4                  }
 140   3                  else if (state.mode1 == 2 && argument.value != -99)
 141   3                  {
 142   4                      argument.value--;
 143   4                  }
 144   3              }
 145   2              break;
 146   2      
 147   2              // 加按键
 148   2              case 9:
 149   2              {
 150   3                  if (state.mode1 == 1 && adjust.value != 99)
 151   3                  {
 152   4                      adjust.value++;
 153   4                  }
 154   3                  else if (state.mode1 == 2 && argument.value != 99)
 155   3                  {
 156   4                      argument.value++;
 157   4                  }
 158   3              }
 159   2              break;
 160   2          }
 161   1      }
 162          
 163          void state_proc()
 164          {
 165   1          uchar i;
 166   1          switch (state.mode1)
 167   1          {
 168   2              
 169   2              // 温度界面
 170   2              case 0:
 171   2              {
 172   3                  // C 16 16 16 16 T T. T     T -> 温度值
 173   3                  if (state.only != 0)
 174   3                  {
 175   4                      state.only = 0;
 176   4                      seg[0] = 12; seg[1] = 16; seg[2] = 16; seg[3] = 16; seg[4] = 16;
 177   4                  }
 178   3                  seg[5] = (uchar) (temp.value / 100 % 10);
C51 COMPILER V9.60.7.0   MAIN                                                              04/07/2025 16:34:10 PAGE 4   

 179   3                  seg[6] = (uchar) ( (temp.value / 10 % 10) + 32);
 180   3                  seg[7] = (uchar) (temp.value % 10);
 181   3              }
 182   2              break;
 183   2              
 184   2              // 校准值
 185   2              case 1:
 186   2              {
 187   3                  // E 16 16 16 16 A A A      A -> 校准值 进行负数处理 范围 -99 ~ 99
 188   3                  if (state.only != 1)
 189   3                  {
 190   4                      state.only = 1;
 191   4                      seg[0] = 14; seg[1] = 16; seg[2] = 16; seg[3] = 16; seg[4] = 16;
 192   4                  }
 193   3      
 194   3                  if (adjust.value < 0)
 195   3                  {
 196   4                      i = -adjust.value;
 197   4                      adjust.negative = 1;
 198   4                  }
 199   3                  else
 200   3                  {
 201   4                      i = adjust.value;
 202   4                      adjust.negative = 0;
 203   4                  }
 204   3      
 205   3                  adjust.list[0] = i / 100 % 10;
 206   3                  adjust.list[1] = i / 10 % 10;
 207   3                  adjust.list[2] = i % 10;
 208   3      
 209   3                  delete_0(adjust.list, 3, adjust.value < 0 ? 1 : 0);
 210   3      
 211   3                  seg[5] = adjust.list[0];
 212   3                  seg[6] = adjust.list[1];
 213   3                  seg[7] = adjust.list[2];
 214   3              }
 215   2              break;
 216   2      
 217   2              // 参数界面
 218   2              case 2:
 219   2              {
 220   3                  // H 16 16 16 16 A A A   A -> 参数 -99 ~ 99
 221   3                  if (state.only != 2)
 222   3                  {
 223   4                      state.only = 2;
 224   4                      seg[0] = 18; seg[1] = 16; seg[2] = 16; seg[3] = 16; seg[4] = 16;
 225   4                  }
 226   3      
 227   3                  if (argument.value < 0)
 228   3                  {
 229   4                      i = -argument.value;
 230   4                      argument.negative = 1;
 231   4                  }
 232   3                  else
 233   3                  {
 234   4                      i = argument.value;
 235   4                      argument.negative = 0;
 236   4                  }
 237   3      
 238   3                  argument.list[0] = i / 100 % 10;
 239   3                  argument.list[1] = i / 10 % 10;
 240   3                  argument.list[2] = i % 10;
C51 COMPILER V9.60.7.0   MAIN                                                              04/07/2025 16:34:10 PAGE 5   

 241   3      
 242   3                  delete_0(argument.list, 3, argument.value < 0 ? 1 : 0);
 243   3      
 244   3                  seg[5] = argument.list[0];
 245   3                  seg[6] = argument.list[1];
 246   3                  seg[7] = argument.list[2];
 247   3              }
 248   2              break;
 249   2          }
 250   1      }
 251          
 252          void ds18b20_proc()
 253          {
 254   1          float temperature;
 255   1          
 256   1          temperature = read_temp();
 257   1      
 258   1          temperature = temperature + adjust.value;
 259   1      
 260   1          // 保留一位小数
 261   1          temp.value = (int) (temperature * 10);
 262   1      
 263   1          
 264   1          led_proc(2);
 265   1      }
 266          
 267          
 268          void delete_0(uchar *list, uchar n, bit negative)
 269          {
 270   1          uchar i;
 271   1          if (n == 0) { return; }
 272   1      
 273   1          for (i = 0;i < (n - 1);i++)
 274   1          {
 275   2              if (list[i] == 0)
 276   2              {
 277   3                  
 278   3                  if (list[i + 1] != 0 && negative == 1)
 279   3                  {
 280   4                      list[i] = 17;
 281   4                  }
 282   3                  else
 283   3                  {
 284   4                      list[i] = 16;
 285   4                  }
 286   3              }
 287   2              else
 288   2              {
 289   3                  break;
 290   3              }
 291   2          }
 292   1      }
 293          
 294          void led_proc(uchar i)
 295          {
 296   1          switch (i)
 297   1          {
 298   2              case 0:
 299   2              {
 300   3                  // 状态灯
 301   3                  led[0] = 0; led[1] = 0; led[2] = 0;
 302   3                  led[state.mode1] = 1;  
C51 COMPILER V9.60.7.0   MAIN                                                              04/07/2025 16:34:10 PAGE 6   

 303   3              }
 304   2              break;
 305   2      
 306   2              case 1:
 307   2              {
 308   3                  // 上下限灯
 309   3                  if (state.mode2 == 0)
 310   3                  {
 311   4                      led[3] = 1;
 312   4                      led[4] = 0;
 313   4                  }
 314   3                  else
 315   3                  {
 316   4                      led[3] = 0;
 317   4                      led[4] = 1;
 318   4                  }
 319   3              }
 320   2              break;
 321   2      
 322   2              case 2:
 323   2              {
 324   3                  // check
 325   3      
 326   3                  if (state.mode2 == 0)
 327   3                  {
 328   4                      if (temp.value > argument.value* 10)
 329   4                      {
 330   5                          led[7] = 1;
 331   5                      }
 332   4                      else
 333   4                      {
 334   5                          led[7] = 0;
 335   5                      }
 336   4                  }
 337   3                  else if (state.mode2 == 1)
 338   3                  {
 339   4                      if (temp.value < argument.value* 10)
 340   4                      {
 341   5                          led[7] = 1;
 342   5                      }
 343   4                      else
 344   4                      {
 345   5                          led[7] = 0;
 346   5                      }
 347   4                  }
 348   3              }
 349   2              break;
 350   2          }
 351   1      }
 352          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    931    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     22       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
