C51 COMPILER V9.60.7.0   MAIN                                                              06/09/2025 18:26:59 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE code\main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings
                    -\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "main.h"
   2          
   3          
   4          
   5          
   6          KEY key;
   7          FREQ freq;
   8          CAR car;
   9          
  10          
  11          
  12          
  13          // PCA_______________________________________
  14          
  15          /* void pcaInterrupt() interrupt 7
  16          {
  17              if (CCF0)
  18              {
  19                  CCF0 = 0;
  20                  setPcaTime += CCAP0_TIME;
  21          
  22                  CCAP0L = setPcaTime;
  23                  CCAP0H = setPcaTime >> 8;
  24                  
  25                  time_1ms();
  26              }
  27          }
  28           */
  29          
  30          void Timer1_Isr(void) interrupt 3
  31          {
  32   1          time_1ms();
  33   1      }
  34          // 频率
  35          void Timer0_Isr(void) interrupt 1
  36          {
  37   1          freq.times++;
  38   1      }
  39          
  40          
  41          // 任务调度_______________________________________
  42          
  43          
  44          void time_1ms()
  45          {
  46   1          seg_display();
  47   1          led_display();
  48   1          uart_task();
  49   1      
  50   1          if (key.time < KEY_TIME) { key.time++; }
  51   1          if (freq.time < FREQ_TIME) { freq.time++; }
  52   1          if (uart.out_time_flag && uart.out_time < 11) { uart.out_time++; }
  53   1          
  54   1      
C51 COMPILER V9.60.7.0   MAIN                                                              06/09/2025 18:26:59 PAGE 2   

  55   1          
  56   1          
  57   1       }
  58          
  59          
  60          void task_loop()
  61          {
  62   1          if (key.time == KEY_TIME)
  63   1          {
  64   2              key_task();        
  65   2              key.time = 0;
  66   2          }
  67   1      
  68   1          if (freq.time == FREQ_TIME)
  69   1          {
  70   2              freq.time = 0;
  71   2              freq_task();
  72   2          }
  73   1      
  74   1          if (delay_send_flag)
  75   1          {
  76   2              delay_send_flag = 0;
  77   2              
  78   2          }
  79   1      }
  80          
  81          void main()
  82          {
  83   1          
  84   1          clean_display();
  85   1          timer();
  86   1          uart_send("start");
  87   1          
  88   1          while (1)
  89   1          {
  90   2              task_loop();
  91   2          }
  92   1      }
  93          
  94          
  95          // _________________________________________任务函数
  96          
  97          void key_task()
  98          {
  99   1          key.press = key_scan();
 100   1      }
 101          
 102          
 103          
 104          /* void free_state(uchar xx, yy)
 105          {
 106              uchar distance_x;
 107              uchar distance_y;
 108              uchar distance;
 109              distance_x = car.x - xx;
 110              distance_y = car.y - yy;
 111          
 112              distance = distance_x * distance_x + distance_y *distance_y;
 113              distance = sqrt(distance);
 114          
 115          } */
 116          
C51 COMPILER V9.60.7.0   MAIN                                                              06/09/2025 18:26:59 PAGE 3   

 117          
 118          void freq_task()
 119          {
 120   1          freq.times_out = freq.times;
 121   1          freq.times = 0;
 122   1          
 123   1      }
 124          
 125          
 126          void number_display(uint i)
 127          {
 128   1          seg_list[3] = i / 10000 % 10;
 129   1          seg_list[4] = i / 1000 % 10;
 130   1          seg_list[5] = i / 100 % 10;
 131   1          seg_list[6] = i / 10 % 10;
 132   1          seg_list[7] = i % 10;
 133   1      
 134   1      }
 135          
 136          
 137          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    338    ----
   CONSTANT SIZE    =      6    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     33    ----
   IDATA SIZE       =      6    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
