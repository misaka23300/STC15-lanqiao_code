C51 COMPILER V9.60.7.0   MAIN                                                              06/10/2025 14:32:06 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE code\main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings
                    -\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "main.h"
   2          
   3          
   4          
   5          
   6          idata KEY key;
   7          idata FREQ freq;
   8          idata CAR car;
   9          idata SONIC sonic;
  10          
  11          
  12          
  13          // PCA_______________________________________
  14          
  15          /* void pcaInterrupt() interrupt 7
  16          {
  17              if (CCF0)
  18              {
  19                  CCF0 = 0;
  20                  setPcaTime += CCAP0_TIME;
  21          
  22                  CCAP0L = setPcaTime;
  23                  CCAP0H = setPcaTime >> 8;
  24                  
  25                  time_1ms();
  26              }
  27          }
  28           */
  29          
  30          void Timer1_Isr(void) interrupt 3
  31          {
  32   1          time_1ms();
  33   1      }
  34          // 频率
  35          void Timer0_Isr(void) interrupt 1
  36          {
  37   1          freq.times++;
  38   1      }
  39          
  40          
  41          // 任务调度_______________________________________
  42          
  43          
  44          void time_1ms()
  45          {
  46   1          seg_display();
  47   1          led_display();
  48   1      
  49   1      
  50   1          if (key.time < KEY_TIME) { key.time++; }
  51   1      
  52   1          if (freq.time < FREQ_TIME) { freq.time++; }
  53   1      
  54   1          if (uart.time < UART_TIME) {uart.time++; }
C51 COMPILER V9.60.7.0   MAIN                                                              06/10/2025 14:32:06 PAGE 2   

  55   1      
  56   1          if (uart.out_time_flag && uart.out_time < 11) { uart.out_time++; }
  57   1      
  58   1          if (sonic.time < SONIC_TIME) {sonic.time++; }
  59   1      
  60   1       }
  61          
  62          
  63          void task_loop()
  64          {
  65   1          uchar *p = &sonic.distance;
  66   1          if (key.time == KEY_TIME)
  67   1          {
  68   2              key_task();        
  69   2              key.time = 0;
  70   2          }
  71   1      
  72   1          if (freq.time == FREQ_TIME)
  73   1          {
  74   2              freq.time = 0;
  75   2              freq_task();
  76   2          }
  77   1      
  78   1          if (uart.time == UART_TIME)
  79   1          {
  80   2              uart.time = 0;
  81   2              uart_task();
  82   2          }
  83   1      
  84   1          if (sonic.time == SONIC_TIME)
  85   1          {
  86   2              sonic.time = 0;
  87   2              sonic.distance = sonic_measure();
  88   2              printf(p);
  89   2              seg_list[5] = sonic.distance / 100 % 10;
  90   2              seg_list[6] = sonic.distance / 10 % 10;
  91   2              seg_list[7] = sonic.distance % 10;
  92   2          }
  93   1      }
  94          
  95          void main()
  96          {
  97   1          
  98   1          clean_display();
  99   1          timer();
 100   1          printf("start");
 101   1          
 102   1          while (1)
 103   1          {
 104   2              task_loop();
 105   2          }
 106   1      }
 107          
 108          
 109          // _________________________________________任务函数
 110          
 111          void key_task()
 112          {
 113   1          key.press = key_scan();
 114   1      }
 115          
 116          
C51 COMPILER V9.60.7.0   MAIN                                                              06/10/2025 14:32:06 PAGE 3   

 117          
 118          /* void free_state(uchar xx, yy)
 119          {
 120              uchar distance_x;
 121              uchar distance_y;
 122              uchar distance;
 123              distance_x = car.x - xx;
 124              distance_y = car.y - yy;
 125          
 126              distance = distance_x * distance_x + distance_y *distance_y;
 127              distance = sqrt(distance);
 128          
 129          } */
 130          
 131          
 132          void freq_task()
 133          {
 134   1          freq.times_out = freq.times;
 135   1          freq.times = 0;
 136   1          
 137   1      }
 138          
 139          
 140          void number_display(uint i)
 141          {
 142   1          seg_list[3] = i / 10000 % 10;
 143   1          seg_list[4] = i / 1000 % 10;
 144   1          seg_list[5] = i / 100 % 10;
 145   1          seg_list[6] = i / 10 % 10;
 146   1          seg_list[7] = i % 10;
 147   1      
 148   1      }
 149          
 150          
 151          void uart_task()
 152          {
 153   1          if (uart.index == 0) {return ;}
 154   1      
 155   1          if (uart.out_time > 10)
 156   1          {
 157   2              uart.out_time = 0;
 158   2              uart.out_time_flag = 0;
 159   2      
 160   2              printf("ciallo~");
 161   2          }
 162   1      }
 163          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    503    ----
   CONSTANT SIZE    =     14    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =     17    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
