C51 COMPILER V9.60.7.0   MAIN                                                              06/11/2025 19:16:10 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE code\main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings
                    -\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "main.h"
   2          
   3          
   4          
   5          
   6          idata KEY key;
   7          idata FREQ freq;
   8          idata CAR car;
   9          idata SONIC sonic;
  10          
  11          
  12          xdata PCF8591 adc;
  13          xdata DISPLAY display;
  14          
  15          // PCA_______________________________________
  16          
  17          /* void pcaInterrupt() interrupt 7
  18          {
  19              if (CCF0)
  20              {
  21                  CCF0 = 0;
  22                  setPcaTime += CCAP0_TIME;
  23          
  24                  CCAP0L = setPcaTime;
  25                  CCAP0H = setPcaTime >> 8;
  26                  
  27                  time_1ms();
  28              }
  29          }
  30           */
  31          
  32          void Timer1_Isr(void) interrupt 3
  33          {
  34   1          time_1ms();
  35   1      }
  36          // 频率
  37          void Timer0_Isr(void) interrupt 1
  38          {
  39   1          freq.times++;
  40   1      }
  41          
  42          
  43          // 任务调度_______________________________________
  44          
  45          
  46          void time_1ms()
  47          {
  48   1          seg_display();
  49   1          led_display();
  50   1      
  51   1      
  52   1          if (key.time < KEY_TIME) { key.time++; }
  53   1      
  54   1          if (freq.time < FREQ_TIME) { freq.time++; }
C51 COMPILER V9.60.7.0   MAIN                                                              06/11/2025 19:16:10 PAGE 2   

  55   1      
  56   1          if (uart.time < UART_TIME) {uart.time++; }
  57   1      
  58   1          if (uart.out_time_flag && uart.out_time < 11) { uart.out_time++; }
  59   1      
  60   1          if (sonic.time < SONIC_TIME) {sonic.time++; }
  61   1      
  62   1       }
  63          
  64          
  65          void task_loop()
  66          {
  67   1          uchar *p = &sonic.distance;
  68   1          if (key.time == KEY_TIME)
  69   1          {
  70   2              key_task();        
  71   2              key.time = 0;
  72   2          }
  73   1      
  74   1          if (freq.time == FREQ_TIME)
  75   1          {
  76   2              freq.time = 0;
  77   2              freq_task();
  78   2          }
  79   1      
  80   1          if (uart.time == UART_TIME)
  81   1          {
  82   2              uart.time = 0;
  83   2              uart_task();
  84   2          }
  85   1      
  86   1          if (sonic.time == SONIC_TIME)
  87   1          {
  88   2              sonic.time = 0;
  89   2              sonic.distance = sonic_measure();
  90   2              printf(p);
  91   2              seg_list[5] = sonic.distance / 100 % 10;
  92   2              seg_list[6] = sonic.distance / 10 % 10;
  93   2              seg_list[7] = sonic.distance % 10;
  94   2          }
  95   1      }
  96          
  97          void main()
  98          {
  99   1          
 100   1          clean_display();
 101   1          timer();
 102   1          printf("start");
 103   1          
 104   1          while (1)
 105   1          {
 106   2              task_loop();
 107   2          }
 108   1      }
 109          
 110          
 111          // _________________________________________任务函数
 112          
 113          void key_task()
 114          {
 115   1          key.press = key_scan();
 116   1      }
C51 COMPILER V9.60.7.0   MAIN                                                              06/11/2025 19:16:10 PAGE 3   

 117          
 118          
 119          
 120          /* void free_state(uchar xx, yy)
 121          {
 122              uchar distance_x;
 123              uchar distance_y;
 124              uchar distance;
 125              distance_x = car.x - xx;
 126              distance_y = car.y - yy;
 127          
 128              distance = distance_x * distance_x + distance_y *distance_y;
 129              distance = sqrt(distance);
 130          
 131          } */
 132          
 133          
 134          void freq_task()
 135          {
 136   1          freq.times_out = freq.times;
 137   1          freq.times = 0;
 138   1          
 139   1      }
 140          
 141          
 142          void number_display(uint i)
 143          {
 144   1          seg_list[3] = i / 10000 % 10;
 145   1          seg_list[4] = i / 1000 % 10;
 146   1          seg_list[5] = i / 100 % 10;
 147   1          seg_list[6] = i / 10 % 10;
 148   1          seg_list[7] = i % 10;
 149   1      
 150   1      }
 151          
 152          
 153          void uart_task()
 154          {
 155   1          if (uart.index == 0) {return ;}
 156   1      
 157   1          if (uart.out_time > 10)
 158   1          {
 159   2              uart.out_time = 0;
 160   2              uart.out_time_flag = 0;
 161   2      
 162   2              printf("ciallo~");
 163   2          }
 164   1      }
 165          
 166          void adc_task()
 167          {
 168   1          adc.value = ADC(0x03);
 169   1      
 170   1          if (adc.value > 61)
 171   1          {
 172   2              adc.is_day_no_night = 1;
 173   2          }
 174   1          else
 175   1          {
 176   2              adc.is_day_no_night = 0;
 177   2          }
 178   1      }
C51 COMPILER V9.60.7.0   MAIN                                                              06/11/2025 19:16:10 PAGE 4   

 179          
 180          void display_task()
 181          {
 182   1          switch (display.state)
 183   1          {
 184   2              // L XXX - YYY
 185   2              case 0:
 186   2              {
 187   3                  seg_list[0] = 18;
 188   3                  seg_list[1] = 1;
 189   3              }
 190   2              break;
 191   2          }
 192   1      }
 193          
 194          
 195          void speed_task()
 196          {
 197   1          
 198   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    543    ----
   CONSTANT SIZE    =     14    ----
   XDATA SIZE       =      5    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =     17    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
