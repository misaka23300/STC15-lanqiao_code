C51 COMPILER V9.60.7.0   DISPLAY                                                           06/02/2025 19:16:56 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE DISPLAY
OBJECT MODULE PLACED IN .\Objects\display.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE code\display.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listi
                    -ngs\display.lst) TABS(2) OBJECT(.\Objects\display.obj)

line level    source

   1          #include "display.h"
   2          
   3          uchar code letter[] = {                       //标准字库
   4              //   0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
   5                  0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71,
   6              //black  -     H    J    K    L    N    o   P    U     t    G    Q    r   M    y
   7                  0x00,0x40,0x76,0x1E,0x70,0x38,0x37,0x5C,0x73,0x3E,0x78,0x3d,0x67,0x50,0x37,0x6e,
   8                  0xBF,0x86,0xDB,0xCF,0xE6,0xED,0xFD,0x87,0xFF,0xEF,0x46};    //0. 1. 2. 3. 4. 5. 6. 7. 8. 9. -1
   9          
  10          uchar seg_data[8] = {0, 0, 0, 0, 0, 0, 0 ,0};
  11          uchar led_data[8] = {0, 0, 0, 0, 0, 0, 0 ,0};
  12          
  13          
  14          static uchar randz_now;
  15          static uchar randz_last = 0xFF;
  16           
  17          void set_seg_value(uchar d0, d1, d2, d3, d4, d5, d6, d7)
  18          {
  19   1          seg_data[0] = d0;
  20   1          seg_data[1] = d1;
  21   1          seg_data[2] = d2;
  22   1          seg_data[3] = d3; 
  23   1          seg_data[4] = d4; 
  24   1          seg_data[5] = d5;
  25   1          seg_data[6] = d6;
  26   1          seg_data[7] = d7;
  27   1      }
  28          
  29          void set_seg_list(uchar *list)
  30          {
  31   1          seg_data[0] = list[0];
  32   1          seg_data[1] = list[1];
  33   1          seg_data[2] = list[2];
  34   1          seg_data[3] = list[3];
  35   1          seg_data[4] = list[4];
  36   1          seg_data[5] = list[5];
  37   1          seg_data[6] = list[6];
  38   1          seg_data[7] = list[7];
  39   1      
  40   1      } 
  41          
  42          
  43          /* void set_led_value(uchar d0, d1, d2, d3, d4, d5, d6, d7)
  44          {
  45              led_data[0] = d0;
  46              led_data[1] = d1;
  47              led_data[2] = d2;
  48              led_data[3] = d3; 
  49              led_data[4] = d4; 
  50              led_data[5] = d5;
  51              led_data[6] = d6;
  52              led_data[7] = d7;
  53          } */
  54          
C51 COMPILER V9.60.7.0   DISPLAY                                                           06/02/2025 19:16:56 PAGE 2   

  55          
  56          void seg_display()
  57          {
  58   1          static uchar i;
  59   1      
  60   1          P0 = 0xFF;
  61   1          batch(7);
  62   1          
  63   1          P0 = 0x01 << i;
  64   1          batch(6);
  65   1      
  66   1          P0 = ~letter[seg_data[i]]; 
  67   1          batch(7);
  68   1      
  69   1          i = i + 1;
  70   1          if (i == 8) { i = 0; }
  71   1      }
  72          
  73          /* void led_display()
  74          {
  75              static uchar i;
  76              static uchar now;
  77              static uchar last;
  78          
  79              if (led_data[i])
  80              {
  81                  now = now | (0x01 << i);
  82              }
  83              else
  84              {
  85                  now = now & ~(0x01 << i);
  86              }
  87          
  88              if (last != now)
  89              {
  90                  P0 = ~now;
  91                  batch(4);
  92          
  93                  last = now;
  94              }
  95          
  96              i = i + 1;
  97              if (i == 8) { i = 0; }
  98          }
  99          
 100          
 101          // 继电器 4
 102          
 103          void relay(bit state)
 104          {
 105              
 106              if (state)
 107              {
 108                  randz_now = randz_now | (0x10);
 109              }
 110              else
 111              {
 112                  randz_now = randz_now & ~(0x10);
 113              }
 114          
 115              if (randz_now != randz_last)
 116              {
C51 COMPILER V9.60.7.0   DISPLAY                                                           06/02/2025 19:16:56 PAGE 3   

 117                  P0 = randz_now;
 118                  batch(5);
 119                  randz_last = randz_now;
 120              }
 121          }
 122          
 123          
 124          
 125          // 蜂鸣器 6
 126          void buzz(bit state)
 127          {
 128              if (state)
 129              {
 130                  randz_now = randz_now | (0x40);
 131              }
 132              else
 133              {
 134                  randz_now = randz_now & ~(0x40);
 135              }
 136              
 137              if (randz_now != randz_last)
 138              {
 139                  P0 = randz_now;
 140                  batch(5);
 141                  randz_last = randz_now;
 142              }
 143          }
 144          
 145          
 146           */
 147          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    141    ----
   CONSTANT SIZE    =     43    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     19      15
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
