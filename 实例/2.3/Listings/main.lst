C51 COMPILER V9.60.7.0   MAIN                                                              06/13/2025 15:01:07 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE code\main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings
                    -\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "main.h"
   2          
   3          enum {
   4              KEY_TASK = 20,
   5              SONIC_TASK = 100,
   6              FREQ_TASK = 1000,
   7              DISPLAY_TASK = 50
   8          };
   9          
  10          
  11          typedef struct {
  12              uchar time;
  13              uchar press;
  14          } KEY;
  15          
  16          KEY key;
  17          
  18          typedef struct {
  19              uint time;
  20              uchar distance;
  21          } SONIC;
  22          
  23          SONIC sonic;
  24          
  25          /* typedef struct {
  26              uint time;
  27              uint times;
  28              uint out_times;
  29          } FREQ;
  30          
  31          FREQ freq; */
  32          
  33          uint freq_time;
  34          uint freq_times;
  35          uint freq_out_times;
  36          
  37          uchar display_mode;     // -> 显示状态
  38          uchar display_time;
  39          
  40          // ---------------------------------------------------- 任务调度
  41          void main()
  42          {
  43   1          clean_display();
  44   1          timer();
  45   1      
  46   1          test();
  47   1          while (1)
  48   1          {
  49   2              task_loop();
  50   2          }
  51   1      }
  52          
  53          void task_loop() 
  54          {
C51 COMPILER V9.60.7.0   MAIN                                                              06/13/2025 15:01:07 PAGE 2   

  55   1          if (key.time == KEY_TASK)
  56   1          {
  57   2              key.time = 0;
  58   2              key.press = key_scan();
  59   2              key_task();
  60   2      
  61   2              if (sonic.time == SONIC_TASK)
  62   2              {
  63   3                  sonic.time = 0;
  64   3                  sonic.distance = sonic_measure();
  65   3          }
  66   2                  
  67   2      
  68   2              if (freq_time == FREQ_TASK)
  69   2              {
  70   3                  freq_time = 0;
  71   3                  freq_task();
  72   3                  printf("%u", freq_out_times);
  73   3              }
  74   2      
  75   2              if (display_time == DISPLAY_TASK)
  76   2              {
  77   3                  display_time = 0;
  78   3                  display_task();
  79   3              }
  80   2              
  81   2          }
  82   1      }
  83          
  84          void timer1_interrupt() interrupt 3
  85          {
  86   1          seg_display();
  87   1          led_display();
  88   1          //display_task();
  89   1      
  90   1          if (key.time < KEY_TASK) { key.time++; }
  91   1      
  92   1          if (sonic.time < SONIC_TASK) {sonic.time++;}
  93   1      
  94   1          if (freq_time < FREQ_TASK) {freq_time++; }
  95   1      
  96   1          if (display_time < DISPLAY_TASK) { display_time++; }
  97   1      }
  98          
  99          
 100          
 101          void Timer0_Isr(void) interrupt 1
 102          {
 103   1          freq_times++;
 104   1      }
 105          
 106          // -----------------------------------------------------------任务函数
 107          void test()
 108          {
 109   1          relay(1);
 110   1          led_list[0] = 1;
 111   1          putchar('c');
 112   1      }
 113          
 114          
 115          
 116          void display_task()
C51 COMPILER V9.60.7.0   MAIN                                                              06/13/2025 15:01:07 PAGE 3   

 117          {
 118   1          switch (display_mode)
 119   1          {
 120   2              case 0:
 121   2              {
 122   3                  if (key.press != 99)
 123   3                  {
 124   4                      seg_list[1] = key.press % 10;
 125   4                      seg_list[0] = key.press / 10 % 10;
 126   4                  }
 127   3              }
 128   2              break; 
 129   2      
 130   2              case 1:
 131   2              {
 132   3                  seg_list[5] = sonic.distance % 10;
 133   3                  seg_list[4] = sonic.distance / 10 % 10;
 134   3                  seg_list[3] = sonic.distance / 100 % 10;
 135   3              }
 136   2              break; 
 137   2      
 138   2              case 2:
 139   2              {
 140   3                  seg_list[0] = (uchar) freq_out_times / 10000;
 141   3                  seg_list[1] = (uchar) freq_out_times / 1000 % 10;
 142   3                  seg_list[2] = (uchar) freq_out_times / 100 % 10;
 143   3                  seg_list[3] = (uchar) freq_out_times / 10 % 10;
 144   3                  seg_list[4] = (uchar) freq_out_times % 10;
 145   3              }
 146   2              break; 
 147   2          }
 148   1      }
 149          
 150          
 151          void key_task()
 152          {
 153   1          switch (key.press)
 154   1          {
 155   2              case 4: 
 156   2              {
 157   3                  display_mode++;
 158   3                  if (display_mode == 3) { display_mode = 0;}
 159   3              }
 160   2              break;
 161   2          }
 162   1      }
 163          
 164          
 165          void freq_task()
 166          {
 167   1      
 168   1          TR0 = 0;//�ر�T0;
 169   1          freq_out_times =(uint)(TH0 << 8) | TL0;
 170   1          TR0 = 1;//�ٴδ�
 171   1          TH0 = 0;
 172   1          TL0 = 0;//��ռ�����
 173   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    426    ----
   CONSTANT SIZE    =      3    ----
C51 COMPILER V9.60.7.0   MAIN                                                              06/13/2025 15:01:07 PAGE 4   

   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     13    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
